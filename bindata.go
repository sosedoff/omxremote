// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x6d\x6f\x23\xb7\x11\xfe\x6c\xff\x8a\x09\xef\x02\xcb\x88\x77\x57\x76\xec\x36\x27\x4b\x0a\xda\x24\x40\xd1\x0f\x4d\x80\x4b\x3f\x14\x45\x61\x50\xbb\xb3\x16\xcf\x5c\x72\x4b\x72\x25\x39\x17\xff\xf7\x82\xe4\xbe\xef\x4a\x96\x70\xbd\x34\xc5\x01\xe7\x15\x39\x9c\x79\xe6\x99\x17\x92\x5a\xcd\xbf\xf8\xfe\xc7\xef\x7e\xfe\xc7\x4f\x3f\xc0\xda\x64\x7c\x79\x3e\xf7\x7f\x00\xe6\x6b\xa4\x89\x7d\x00\x98\x67\x68\x28\x08\x9a\xe1\x82\x6c\x18\x6e\x73\xa9\x0c\x81\x58\x0a\x83\xc2\x2c\xc8\x96\x25\x66\xbd\x48\x70\xc3\x62\x0c\xdc\x87\x2b\x60\x82\x19\x46\x79\xa0\x63\xca\x71\x71\x1d\x4e\xaf\x20\xa3\x3b\x96\x15\x59\x7b\xa8\xd0\xa8\xdc\x67\xba\xe2\xb8\x10\x92\x40\x34\xb4\x48\xf3\x9c\x63\x90\xc9\x15\xe3\x18\x6c\x71\x15\xd0\x3c\x0f\x62\x9a\xdb\x35\x2d\x14\xcf\xa8\x9b\xe5\x9c\x89\x27\x58\x2b\x4c\x17\x64\x6d\x4c\x3e\x8b\xa2\x8c\xee\xe2\x44\x84\x2b\x29\x8d\x36\x8a\xe6\xf6\x43\x2c\xb3\x28\x95\xc2\x04\x74\x8b\x5a\x66\x18\xdd\x86\x7f\x0c\xa7\x51\xac\x75\x67\x38\xcc\x98\x08\x63\xad\x09\x28\xe4\x0b\xa2\xcd\x33\x47\xbd\x46\x34\x8d\x3d\x1d\x2b\x96\x1b\x30\xcf\x39\x2e\x88\xc1\x9d\x89\x3e\xd0\x0d\xf5\xa3\x04\xb4\x8a\x3d\x0e\x3d\x8b\xa2\x58\x26\x18\x7e\xf8\x77\x81\xea\xd9\x01\xf0\x8f\xc1\x4d\x78\x1d\x5e\x3b\x4b\x1f\x34\x59\xce\x23\xbf\xb6\x54\x6f\x98\xe1\xb8\x94\xd9\x4e\x61\x26\x0d\xce\x23\x3f\x60\xa3\x14\x55\x61\x9a\x3b\x5c\x7e\x81\x8d\x21\x7c\x74\x8f\x00\x6b\x64\x8f\x6b\x33\x83\xeb\xe9\xf4\xcb\x7b\x37\xf6\x72\xee\xfe\xac\x64\xf2\x5c\x4b\xe5\x34\x49\x98\x78\x9c\xc1\x34\xdf\xdd\x97\x63\x19\x55\x8f\x4c\x74\x86\x86\xca\x00\x1c\x57\x29\xcd\x18\x7f\x9e\xc1\x5f\x90\x6f\xd0\xb0\x98\x56\xb3\x2b\x1a\x3f\x3d\x2a\x59\x88\x64\x06\x6f\xd2\x34\xad\xc6\x63\xc9\xa5\x9a\xc1\x9b\xe9\x74\xda\x41\xc5\xc2\x94\x06\x39\xa7\x03\x68\x01\xc7\xd4\xcc\xe0\x9b\x0a\x4c\x29\x1f\xae\x0a\x63\xa4\xa8\xa5\xe3\x42\x69\xab\x38\x97\x4c\x18\x54\x7d\x73\xb7\xb7\xb7\x63\xcb\x43\x1a\x1b\xb6\xc1\x46\x4b\x83\x0e\xbe\x60\x99\xcd\x78\x2a\x4c\x6f\xa5\x92\x5b\xdd\x2c\x49\x98\xb6\xb0\x67\x20\xa4\xc0\xca\xec\x2f\x01\x13\x09\xee\x66\x70\x3d\xba\xb6\xe0\xa7\x05\x60\xb8\x9c\xb3\x53\x43\xc8\x99\x36\x81\x4b\x96\xc0\xe6\x6b\x17\x6f\x33\xd9\x1f\x17\x18\xd4\xc1\x0f\xef\x30\xab\xe3\x2b\x55\x82\x2a\x58\x49\x63\x64\x36\x83\xeb\x7c\x07\x5a\x72\x96\xc0\x1b\xc4\x7a\x79\x0d\xed\xfa\x26\xdf\x35\x21\x2c\x73\x47\xb3\x5f\xd0\x6a\xbd\xae\xb4\x8e\xba\xc9\xc6\x82\xd3\xf5\x33\x50\x1e\xe0\x6d\x63\xa0\x8e\x0a\x13\xce\x87\x15\x97\xf1\x53\x35\xe9\x9a\xd5\x0c\x6e\x5a\xec\xd8\xe2\x0d\x28\x67\x8f\x62\x06\x31\x36\x19\x34\x0a\x89\xd6\x90\xdc\xb2\x04\x63\xa9\xa8\x61\x52\x74\xc9\x1b\xc1\xbb\x5d\x33\x83\x81\xce\x69\xec\x88\xde\x2a\x9a\x57\x53\x72\x83\x2a\xe5\x72\x3b\x83\x35\x4b\x12\x14\x1d\x64\xcd\x24\x72\xce\x72\xcd\xf4\xc0\xd1\x96\x87\x15\x68\xdb\x24\x95\xe4\xfa\x70\xae\xe6\x52\x33\x0f\x5e\x21\xa7\xb6\x1c\x7a\x3c\xb5\x8b\x7e\xac\x11\xd4\xc9\x7e\xb3\xc7\x7c\x2b\x57\x6b\x5b\x74\xa5\x25\x2f\x4c\x6d\xcb\xc8\x7c\x06\x77\xd3\x2f\xef\xc1\xd7\xfb\x5d\xa3\xdf\x76\xff\x27\x66\x02\xa3\xa8\xd0\xa9\x54\xd9\x0c\xdc\x23\xa7\x06\x27\xc1\xdd\xf4\xcb\x2b\xb0\xff\x5f\xee\xb1\x1e\x2a\xdc\x32\x91\x8c\x60\x48\xd9\x0e\x93\x0e\x80\x69\xdf\xcf\x9b\x06\xc6\x80\x8d\xbd\x96\xfa\xbd\xe9\x55\x86\xef\x0e\x13\x9c\x72\x49\xcd\xcc\x11\xf3\x5a\xbe\x76\x4a\xeb\xa6\x5d\xae\x3b\x3b\xe8\x8a\xb1\x2e\xdd\xdd\xeb\xc5\xbc\x5a\xad\x46\x3b\x7a\x5d\xe4\x07\x48\xa0\xf1\xd3\x96\xaa\x24\x48\xa9\x36\x35\x17\xa5\xa9\xb2\x62\xa7\x23\x96\xf6\x6b\x4c\xa5\xda\xab\xd0\x67\xcd\x18\xf2\xa1\xbe\x8d\xe4\x45\x86\xaf\x25\x44\xc5\xc6\x27\xe6\x44\x69\xec\xe4\x9c\xb8\xb9\xfb\x2c\x39\xf1\xf5\x89\x39\xe1\xca\xe2\xd3\x12\xa2\x62\xc0\xff\x0d\x8a\x7c\x3c\x76\xc7\xe5\x42\x4f\x59\x22\xb7\x02\x42\xe1\x3c\x2f\x12\x26\x6d\x93\x88\x9f\x20\xcc\x15\x6e\x98\x2c\x74\x67\x74\x3c\x07\x5b\xce\xd5\xe7\x94\xa1\xdd\x8c\xb2\xb1\xe0\x0d\x5b\x48\x2b\x3b\xaa\x0c\x3a\x2d\x61\x9c\xa5\xb0\x7b\x14\xfa\xfc\x6d\xb3\xc9\x32\x5a\x18\xd9\x83\x7b\xdb\xf6\xc9\x73\x47\x13\x56\xe8\x6e\x4a\xd6\x87\x8e\x8e\x8a\x91\xac\x84\x61\x5a\xde\xf6\xd2\x72\x4d\x13\xbb\xdb\x31\xa1\xd1\xc0\xd4\xfd\xfb\x3a\xdf\x75\xf6\xd2\x7d\x27\xc9\x51\x2a\x67\x2b\x4c\xa5\x1a\x39\xb5\x75\x0e\x06\xe5\xad\x62\x06\x17\x70\xd1\x3b\xc3\x94\x85\xf0\x6a\xdc\xaa\xae\xf7\x39\x63\x77\x73\x7d\x77\x42\xf0\x6e\x3e\x7b\xf0\xfa\xfb\xcc\x7f\x33\x78\x35\x9f\x83\x03\x6f\x55\xbf\x83\x9b\x41\x5f\x45\xb9\x6d\x7c\xc6\x88\x5c\xff\x2f\x03\xf2\xdb\xc6\xa3\x22\x73\x18\x0e\x4f\xd9\x1f\x8e\x8c\x46\x59\x90\x57\x87\xa3\xfe\x9b\x95\xad\x2e\x56\xee\x72\xad\x8f\xcd\x12\x77\x79\x00\x55\x9d\x08\x86\x57\xe5\xc3\x81\xff\x94\x72\xeb\xdc\xc3\xda\x4b\x1c\x9a\x7e\x44\xdf\xbd\x7b\xf7\x8a\xeb\x46\xe6\xa7\x79\xed\x23\xfd\x3b\x71\xba\x7d\x02\x3a\xda\x67\x26\x52\x79\x84\xcf\xcd\x06\xde\xba\x47\xff\xdf\x38\x3f\x7a\xdf\x7b\x71\xdf\x1e\xd5\x5f\x1a\xcd\x57\x32\x79\x2e\xbf\x6e\x4a\xd8\x06\x62\x4e\xb5\x5e\x10\x7f\xdd\x25\xcb\x52\xcf\xbc\xe0\xcb\x79\x54\xf0\x52\x30\x4a\xd8\x66\x79\x3e\x58\x54\x91\xdc\x2c\x6b\x4d\xfa\x33\x7c\x3d\xd5\x33\xe7\xcf\xc6\x34\xb6\x61\x80\xce\xc5\x81\x40\x42\x0d\x5d\x10\x8d\xf8\xf4\x60\x67\x1e\xdc\xe8\x72\xce\xaa\xc5\x29\x85\x94\x3a\xd9\xa0\x5a\x49\x96\xf3\x88\x2d\x4b\x9c\xaf\x1b\x6c\xdf\x2b\x3a\xf6\xca\x89\x43\x26\x4b\x91\xb6\xc5\xd2\x5e\x45\x42\x1b\x45\x1b\x83\xcd\xc4\x3d\x7c\x34\xdd\xc8\x23\xac\x41\x55\xe3\x64\xf9\xfe\xef\x7f\x7e\x7f\xc0\x41\x5b\xd4\x64\xf9\xfe\xe7\x1f\x7f\x3a\x9a\x85\x9a\xbc\x3e\xe3\x43\xcf\xc7\x78\xae\x1d\x3e\x82\xe9\x31\x92\x47\xf8\x1d\x52\x7b\x84\x09\x9b\xf0\x95\xfe\x9c\x16\x1a\x09\xb0\x64\x41\x4a\x22\x07\x46\xbc\xc8\xd0\xc4\xde\xb0\xf9\x8b\xc7\x51\x89\xec\x2e\x27\xad\x8b\x4a\x05\xcb\x0f\x3d\xb8\xa1\x01\xa0\xb6\xfc\x69\x9e\x3b\x73\x63\x17\x9f\x9a\x0e\x85\x9b\x07\x37\xee\x87\x97\xe7\x67\x67\x67\x73\x9d\x53\xd1\x40\x08\xb4\xb1\x57\xa5\x94\x06\xfc\xd1\x0b\x9c\xf5\x11\xc6\x32\xcb\x50\x18\xbb\xbb\x4a\xa8\x56\x04\xd7\x3b\x02\x54\x31\x1a\xf8\xaf\xaf\x16\xc4\xa8\xa2\x24\x76\x5c\x0b\x55\x68\xfc\xfd\xad\xad\xc3\xc9\x9e\xb9\xfe\x64\xe3\xd7\x3a\x5a\x4c\xc3\x77\xb6\x0b\xb6\x37\x76\x3f\xd4\x18\x99\x47\xd6\x99\xe5\xf9\xd9\xd1\x9c\x15\x39\xf4\x2f\x8f\x15\x5b\x76\xfc\x77\xc6\x56\x91\x1f\xcd\xd5\x37\x03\xaa\xec\xc8\x27\x52\x55\xdf\xe0\x7b\x99\x5c\xe4\x7b\xf3\xd8\x4d\x1d\x28\xae\xce\x66\x72\xf0\x7d\x4a\xb5\x78\x43\x95\x2b\x72\x54\xef\x0d\x35\x85\x86\x05\x88\x82\xf3\xfb\xf3\x6a\xdf\x2c\x84\x07\x6c\x99\xa7\x22\x99\x08\x9a\xe1\x65\xbd\xdb\x03\xbc\x0d\x1f\xd1\xfc\xf5\xfd\x8f\x7f\x9b\x90\xa8\x94\x89\x08\x7c\xe5\xde\x3b\x5d\xc1\xc7\x97\xab\x5a\xc5\x44\xa1\xce\xdb\x4b\xdd\x59\x53\x4b\x8e\x21\x97\x8f\x7e\xf6\xbe\x9e\x7c\xa9\x9f\x5f\x06\x58\x2c\xe0\x49\x4e\xcd\x7a\x1f\x10\xd7\xb6\xae\xe0\x23\xa4\x8c\xe3\x0c\xac\x28\x1c\x46\xc2\x52\x70\xa3\xa1\x2e\xe2\x18\xb5\xee\xce\x02\x14\x79\x42\x0d\x7a\x8e\x26\x2d\x98\xfe\x0c\xf0\x3a\x64\x7f\x06\x18\x82\x9e\x90\x82\x93\xcb\x70\x6d\x32\x3e\x21\xe4\xb2\xe6\x1d\x3c\xe8\x85\xff\xf3\xeb\xaf\x40\x48\x6b\xae\xed\x6b\x79\xba\xb0\xde\x5a\xd9\xa3\xbc\x8d\x22\xf8\x53\x92\x80\x42\x53\x28\xbf\x57\x01\x72\xb4\x95\x65\x89\xd8\x22\x14\x22\x41\x05\x14\x72\xaa\xec\x60\xc2\x14\xc6\x46\xaa\xe7\x1e\x63\xce\xd4\x17\x0b\x20\xa4\xcf\x17\x33\x98\x69\xf7\xe4\x5d\x08\x75\xce\x99\x99\x90\x88\x5c\xde\xfb\xc9\x30\x97\x79\x97\x49\xff\x25\xd8\x43\xe9\xb8\x17\xfa\x20\x99\xf0\xab\xce\x3b\x92\x6f\x27\x64\xce\xd9\x72\x4e\xfd\x1b\xca\x8b\x37\x17\xbe\x88\x2e\x6c\xee\x35\x6a\xbe\x02\x72\xd1\x14\xd3\x85\x2f\x26\x8e\x1b\xe4\x41\x91\x5f\xb8\x5a\x72\xd2\xf3\x88\x2e\xe7\x11\x67\x4b\x72\x19\xd2\x3c\x47\x91\xfc\x2c\x27\xa4\x79\x51\x41\x7a\x21\x6f\x7d\x48\xa5\x82\x09\x03\x26\x60\xc8\x33\xb8\x04\x84\x85\x9b\xfa\x27\xfb\x57\xd7\x5b\x5b\x22\xb0\x70\x22\xa1\xfd\xcf\x7e\xee\xb9\x79\x98\xe4\x5a\x45\xe5\x6b\x5d\x79\x5d\x43\x2f\x5d\xa5\x51\x04\x3f\x30\xb3\x76\x01\x76\xf8\xa4\x7d\x1a\x8b\xb1\xef\x0f\x96\xd8\x07\xdb\x46\x2a\xb0\xb5\x28\x7c\x0b\x24\x61\x8a\xc0\x0c\x88\x9d\x21\xf7\x83\xc5\xb1\xd6\x0f\x8e\xfd\xd1\xc5\xee\x60\xc2\x13\x2c\x55\xd0\x20\x65\x3c\x1b\xd1\x62\x83\x0c\x0b\x20\x6f\xc8\x08\x41\x2d\x7c\x8b\x12\xc7\x90\xa9\x4a\x43\xa4\x51\x6d\xf0\x5b\x2b\xb5\x38\x8a\xad\x7e\xa6\xd9\x45\x4e\x99\xcd\x2d\xc7\x8d\x7b\x05\xe8\x27\x1a\x28\xf5\xac\x9f\x70\x81\x1a\x66\xa3\x9d\x6a\x18\xf2\xf3\x36\x27\xed\x78\x27\x2f\xec\xdc\xa9\x49\x5a\x3f\x1d\xe8\x4b\xdd\xbe\xb6\xa7\x9d\x6a\x37\x4d\x5e\x6d\xe7\xbd\x8d\xc4\x0a\x74\xc2\x55\x37\x59\x55\x08\xc1\xc4\x63\x3f\x4a\x6f\x6b\x6f\x6c\x4b\x64\x09\xf6\xfb\x83\x15\xa8\x2f\x46\x97\xa1\x5e\xcb\xed\xbe\x66\x0c\x80\xbc\xf5\x62\x79\xc4\xc0\x70\xf5\xc0\xc0\x18\x86\xb2\x93\x1f\xcf\xf5\xdb\x49\x4d\x59\xdb\xe1\xfe\x8e\xd2\xde\x13\xdc\xd7\x08\xe4\x32\x94\x62\x42\x62\xce\xe2\x27\xd2\xe2\xbd\xbf\x85\xfa\x7d\xd9\x5f\x52\x3a\xa8\xec\x1d\x51\x6e\x43\x2e\x63\xf7\x3e\x35\x54\xc8\x25\x4d\x26\xbd\x4d\xb6\x63\xb7\x3c\xd8\x9f\x64\xf9\xed\xc4\xac\x99\xbe\x0c\xa9\x31\x6a\x42\x6c\xca\x93\xcb\x0e\x8e\x4a\x40\x61\x26\x37\xf8\x9d\x4d\xf5\x09\xf1\xbf\x15\xe8\xf5\x75\x9b\x20\x95\xf4\x9a\xea\x52\xd4\xed\xe6\x97\xfd\x64\x41\x0e\x8b\x5a\x75\xca\x2c\x05\x6c\xb0\x4d\x58\x85\xc8\x5b\xba\xca\xdf\x45\x0c\xd5\x59\x85\x5d\x84\xb5\x68\x48\x93\xa4\x35\xe6\xee\x38\x97\xfd\x9e\xd1\xd5\x34\xc8\xbc\x71\xf5\x5e\x55\x4f\xbf\xb3\xb9\x5f\xfd\xcb\xfe\xe8\xf9\x23\x66\x19\x3d\x23\x8b\x78\xad\x0d\x55\x06\x32\x59\x68\x74\x77\xa0\xbd\xc1\xac\x83\x58\x43\x69\x02\x74\x82\x3d\x14\x09\xb8\x87\x98\x8a\x18\xb9\xb7\x5c\xe4\xaf\xdb\xdd\x93\x1b\xfb\x4c\xaf\x64\xf2\xdc\xcb\x52\x42\xdb\x56\xb0\x6b\x06\xdd\x3b\x2c\x14\xe6\x7b\x4c\x69\xc1\xcd\xa4\x9b\x28\xee\x14\xec\x8f\x1d\x63\xd9\x7c\xdf\x13\x2d\xf7\xc2\xa1\xa8\xdb\x09\x46\x72\xfa\xf0\xe6\xd4\x1c\x67\x4f\x68\x65\xed\x03\xe5\xab\xad\xa8\x7c\x6a\xff\x22\x6a\x1e\xf9\x2f\xab\xe6\x91\xff\xb1\xda\x7f\x02\x00\x00\xff\xff\xed\xde\xe2\x5b\xc4\x26\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 9924, mode: os.FileMode(420), modTime: time.Unix(1591863407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

